neg mul [_1 _1] (30 20 10)
>> (-900 -400 -100)

neg mul[10] (30 20 10)
>> (-300 -200 -100)

neg mul [10 _1] (30 20 10)
>> (-300 -200 -100)

avg: div [foldl[add 0] length]
avg (1 2 3 4 5)
>> 3

div [foldl[add 0] length] (1 2 3 4 5)
>> 5

odd: unequal[0] mod[2]
foldl[add 0] filter[odd] (1 2 3 4 5)
>> 9

odd 5
>> true

even: not odd

foldl[add 0] filter[{unequal[0] mod[2]}] (1 2 3 4 5)
>> 9

odd (1 2 3 4 5)
>> (true false true false true)

reverse (1 2 3 4 5)
>> (5 4 3 2 1)

div reverse [1 2]
>> 2

div [_2 _1] [1 2]
>> 2

print["my name is '{}'"] "tunc"
>> my name is 'tunc'

print['my name is "{}"'] "tunc"
>> my name is "tunc"

if[{println ["true"]} {println ["false"]}] odd (1 2 3 4 5)
>> true
false
true
false
true

ioata at [_1 upperbound[5]] (1 2 3 4 5)
>> (1 2 3 4 5)

# Leetcode 2574. Left and Right Sum Differences https://www.youtube.com/watch?v=i1K_kUKJnE4&t=151s
# Given a 0-indexed integer array nums, find a 0-indexed integer array answer where:
# answer.length == nums.length.
# answer[i] = |leftSum[i] - rightSum[i]|.
# leftSum[i] is the sum of elements to the left of the index i in the array nums. If there is no such element, leftSum[i] = 0.
# rightSum[i] is the sum of elements to the right of the index i in the array nums. If there is no such element, rightSum[i] = 0.

# version 1
l[pos]: rangel[pos]
r[pos]: ranger[{inc pos}]
generator[x pos]: abs sub foldl[add 0] [l[pos] r[pos]] x
generateWithIndex[generator] (10 4 8 3)
>> (15 1 11 22)

# version 2
l: shiftr[0]
r[x]: sub[head[x] x]
abs sub [l r] scanl (10 4 8 3)
>> (15 1 11 22)

# version 3
l: shiftr[0] scanl
r: shiftl[0] reverse scanr
abs sub [l r] (10 4 8 3)
>> (15 1 11 22)


# max count of positive Integers and Negative Integers
# 0 is neither negative and positive
# (-2 -1 -1 1 2 3) => 3
# (-3 -2 -1 0 0 1 2) => 3
# (5 20 66 1314) => 4

# version 1
max length [equal_range[lt[0]] equal_range[gt[0]]] x

#version 2
max length [rangel ranger] equal_range[equals[0]] x

# calculate function from https://www.youtube.com/watch?v=wGCWlI4A5z4&t=372s
calculate[bottom top]: {
  even: equals[0] mod[2]
  foldl[add 0] filter[even] (bottom..=top)
}

# Advent of Code 2022 day 6
# count 4 slides that have unique elements
count[equals[true]] all_unique slides[4] x

#sign of the product of an array
#version 1
find_sign: foldl[mul 1] signum x

# version 2
find_sign: {
  nrNegatives: 0
  if[1 -1] even[nrNegatives] |0: return[0] -1: {inc= nrNegatives}| x
}

# some definitions for internal functions
filter[predicate]: |predicate: _1|
if[trueFunc falseFunc]: |true: trueFunc false: falseFunc|
count[predicate x]: {
  nr: 0
  nr |predicate: {inc= nr}| x
}

# final value of variable after performing operations
operate[x]: {
  val: 0
  val |"--X": {dec= val} "X--": {dec= val} "++X": {inc= val} "X++": {inc= val}| x
}

#hash tables
println |(1: "one" 2: "two" 3: "three" 4: "four" 5: "five")| (1 2 3 4 5)
>> one
two
three
four
five

# match with rest statement
println |odd: "odd" _: "even"| (1 2 3 4 5)
>> odd
even
odd
even
odd

#Advent of Code 2022 in APL & BQN Day 1!
# array of arrays
data: ((1000 2000 3000) (4000) (5000 6000) (7000 8000 9000) (10000))
max foldl[add 0] data
# top three
top[3] sort foldl[add 0] data

# Algorithms as a Tool of Thought
equals_to_first_element[x]: foldl[and true] equals[{head x}] x
equals_to_first_element[x]: all equals[{head x}] x
equals_to_first_element: all equals [head identity]
equals_to_first_element: true |false: return[false]|
equals_to_first_element: equals[1] length unique
equals_to_first_element: all equals [...] slides[2]

min_max_same: equals [min max]

all_smaller_than_1: all lt[1]
